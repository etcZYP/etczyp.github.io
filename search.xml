<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flink 分层API</title>
      <link href="/Flink-%E5%88%86%E5%B1%82API/"/>
      <url>/Flink-%E5%88%86%E5%B1%82API/</url>
      
        <content type="html"><![CDATA[<p>最底层级的抽象仅仅提供了有状态流，它将处理函数（Process Function）嵌入到了<br>DataStream API 中。底层处理函数（Process Function）与 DataStream API 相集成，可以对某<br>些操作进行抽象，它允许用户可以使用自定义状态处理来自一个或多个数据流的事件，且状态<br>具有一致性和容错保证。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以<br>处理复杂的计算。</p><span id="more"></span><p>实际上，大多数应用并不需要上述的底层抽象，而是直接针对核心 API（Core APIs） 进<br>行编程，比如 DataStream API（用于处理有界或无界流数据）以及 DataSet API（用于处理有界<br>数据集）。这些 API 为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换<br>（transformations）、连接（joins）、聚合（aggregations）、窗口（windows）操作等。DataSet API<br>13<br>为有界数据集提供了额外的支持，例如循环与迭代。这些 API 处理的数据类型以类（classes）<br>的形式由各自的编程语言所表示。</p><p>Table API 是以表为中心的声明式编程，其中表在表达流数据时会动态变化。Table API 遵<br>循关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时 API 提供可比<br>较的操作，例如 select、join、group-by、aggregate 等。</p><p>尽管 Table API 可以通过多种类型的用户自定义函数（UDF）进行扩展，仍不如核心 API<br>更具表达能力，但是使用起来代码量更少，更加简洁。除此之外，Table API 程序在执行之前<br>会使用内置优化器进行优化。</p><p>我们可以在表与 DataStream&#x2F;DataSet 之间无缝切换，以允许程序将 Table API 与<br>DataStream 以及 DataSet 混合使用。</p><p>Flink 提供的最高层级的抽象是 SQL。这一层抽象在语法与表达能力上与 Table API 类似，<br>但是是以 SQL 查询表达式的形式表现程序。SQL 抽象与 Table API 交互密切，同时 SQL 查询<br>可以直接在 Table API 定义的表上执行。</p><p>目前 Flink SQL 和 Table API 还在开发完善的过程中，很多大厂都会二次开发符合自己需<br>要的工具包。而 DataSet 作为批处理 API 实际应用较少，2020 年 12 月 8 日发布的新版本 1.12.0,<br>已经完全实现了真正的流批一体，DataSet API 已处于软性弃用（soft deprecated）的状态。用<br>Data Stream API 写好的一套代码, 即可以处理流数据, 也可以处理批数据，只需要设置不同的<br>执行模式。这与之前版本处理有界流的方式是不一样的，Flink 已专门对批处理数据做了优化<br>处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase RowKey设计</title>
      <link href="/HBase-RowKey%E8%AE%BE%E8%AE%A1/"/>
      <url>/HBase-RowKey%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>一条数据的唯一标识就是 RowKey，那么这条数据存储于哪个分区，取决于 RowKey 处<br>于哪个一个预分区的区间内，设计 RowKey 的主要目的 ，就是让数据均匀的分布于所有的<br>region 中，在一定程度上防止数据倾斜。接下来我们就谈一谈 RowKey 常用的设计方案。</p><span id="more"></span><p>1．生成随机数、hash、散列值<br>比如：<br>原 本 rowKey 为 1001 的 ， SHA1 后 变 成 ：<br>dd01903921ea24941c26a48f2cec24e0bb0e8cc7<br>原 本 rowKey 为 3001 的 ， SHA1 后 变 成 ：<br>49042c54de64a1e9bf0b33e00245660ef92dc7bd<br>原 本 rowKey 为 5001 的 ， SHA1 后 变 成 ：<br>7b61dec07e02c188790670af43e717f0f46e8913<br>在做此操作之前，一般我们会选择从数据集中抽取样本，来决定什么样的 rowKey 来 Hash<br>后作为每个分区的临界值。</p><p>2．字符串反转<br>20170524000001 转成 10000042507102<br>20170524000002 转成 20000042507102</p><p>3．字符串拼接<br>20170524000001_a12e<br>20170524000001_93i7</p>]]></content>
      
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB分片集群</title>
      <link href="/MongoDB%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/"/>
      <url>/MongoDB%E5%88%86%E7%89%87%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>分片（sharding）是一种跨多台机器分布数据的方法， MongoDB使用分片来支持具有非常大的数据集<br>和高吞吐量操作的部署。</p><span id="more"></span><p>换句话说：分片(sharding)是指将数据拆分，将其分散存在不同的机器上的过程。有时也用分区<br>(partitioning)来表示这个概念。将数据分散到不同的机器上，不需要功能强大的大型计算机就可以储存<br>更多的数据，处理更多的负载。  </p><p>具有大型数据集或高吞吐量应用程序的数据库系统可以会挑战单个服务器的容量。例如，高查询率会耗<br>尽服务器的CPU容量。工作集大小大于系统的RAM会强调磁盘驱动器的I &#x2F; O容量。<br>有两种解决系统增长的方法：垂直扩展和水平扩展。 </p><p>垂直扩展意味着增加单个服务器的容量，例如使用更强大的CPU，添加更多RAM或增加存储空间量。可<br>用技术的局限性可能会限制单个机器对于给定工作负载而言足够强大。此外，基于云的提供商基于可用<br>的硬件配置具有硬性上限。结果，垂直缩放有实际的最大值。</p><p>水平扩展意味着划分系统数据集并加载多个服务器，添加其他服务器以根据需要增加容量。虽然单个机<br>器的总体速度或容量可能不高，但每台机器处理整个工作负载的子集，可能提供比单个高速大容量服务<br>器更高的效率。扩展部署容量只需要根据需要添加额外的服务器，这可能比单个机器的高端硬件的总体<br>成本更低。权衡是基础架构和部署维护的复杂性增加。</p><p>MongoDB支持通过分片进行水平扩展。MongoDB分片群集包含以下组件：<br>分片（存储）：每个分片包含分片数据的子集。 每个分片都可以部署为副本集。<br>mongos（路由）：mongos充当查询路由器，在客户端应用程序和分片集群之间提供接口。<br>config servers（“调度”的配置）：配置服务器存储群集的元数据和配置设置。 从MongoDB 3.4开<br>始，必须将配置服务器部署为副本集（CSRS）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB副本集</title>
      <link href="/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
      <url>/MongoDB%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>MongoDB中的副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高<br>可用性，是所有生产部署的基础。<br>也可以说，副本集类似于有自动故障恢复功能的主从集群。通俗的讲就是用多台机器进行同一数据的异<br>步同步，从而使多台机器拥有同一数据的多个副本，并且当主库当掉时在不需要用户干预的情况下自动<br>切换其他备份服务器做主库。而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载。</p><span id="more"></span><p>副本集有两种类型三种角色<br>两种类型：<br>主节点（Primary）类型：数据操作的主要连接点，可读写。<br>次要（辅助、从）节点（Secondaries）类型：数据冗余备份节点，可以读或选举。<br>三种角色：<br>主要成员（Primary）：主要接收所有写操作。就是主节点。<br>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可<br>以读操作（但需要配置）。是默认的一种从节点类型。<br>仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用。当然也可以将仲裁服务器维护为副<br>本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB索引</title>
      <link href="/MongoDB%E7%B4%A2%E5%BC%95/"/>
      <url>/MongoDB%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>MongoDB索引使用B树数据结构<br>索引支持在MongoDB中高效地执行查询。如果没有索引，MongoDB必须执行全集合扫描，即扫描集合中的每个文档，以选择与查询语句<br>匹配的文档。这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非<br>常致命的。<br>如果查询存在适当的索引，MongoDB可以使用该索引限制必须检查的文档数。<br>索引是特殊的数据结构，它以易于遍历的形式存储集合数据集的一小部分。索引存储特定字段或一组字段的值，按字段值排序。索引项的排<br>序支持有效的相等匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序结果。</p><span id="more"></span><h2 id="一、索引的类型"><a href="#一、索引的类型" class="headerlink" title="一、索引的类型"></a>一、索引的类型</h2><h3 id="1-1-单字段索引"><a href="#1-1-单字段索引" class="headerlink" title="1.1 单字段索引"></a>1.1 单字段索引</h3><p>MongoDB支持在文档的单个字段上创建用户定义的升序&#x2F;降序索引，称为单字段索引（Single Field Index）。   </p><p>对于单个字段索引和排序操作，索引键的排序顺序（即升序或降序）并不重要，因为MongoDB可以在任何方向上遍历索引。</p><h3 id="1-2-复合索引"><a href="#1-2-复合索引" class="headerlink" title="1.2 复合索引"></a>1.2 复合索引</h3><p>MongoDB还支持多个字段的用户定义索引，即复合索引（Compound Index）。  </p><p>复合索引中列出的字段顺序具有重要意义。例如，如果复合索引由 { userid: 1, score: -1 } 组成，则索引首先按userid正序排序，然后<br>在每个userid的值内，再在按score倒序排序。</p><h3 id="1-3-其他索引"><a href="#1-3-其他索引" class="headerlink" title="1.3 其他索引"></a>1.3 其他索引</h3><p>地理空间索引（Geospatial Index）、文本索引（Text Indexes）、哈希索引（Hashed Indexes）。  </p><p>地理空间索引（Geospatial Index）<br>为了支持对地理空间坐标数据的有效查询，MongoDB提供了两种特殊的索引：返回结果时使用平面几何的二维索引和返回结果时使用球面<br>几何的二维球面索引。</p><p>文本索引（Text Indexes）<br>MongoDB提供了一种文本索引类型，支持在集合中搜索字符串内容。这些文本索引不存储特定于语言的停止词（例如“the”、“a”、“or”），<br>而将集合中的词作为词干，只存储根词。</p><p>哈希索引（Hashed Indexes）<br>为了支持基于散列的分片，MongoDB提供了散列索引类型，它对字段值的散列进行索引。这些索引在其范围内的值分布更加随机，但只支<br>持相等匹配，不支持基于范围的查询。</p><h2 id="二、索引的管理操作"><a href="#二、索引的管理操作" class="headerlink" title="二、索引的管理操作"></a>二、索引的管理操作</h2><h3 id="2-1-索引的查看"><a href="#2-1-索引的查看" class="headerlink" title="2.1 索引的查看"></a>2.1 索引的查看</h3><p>说明：<br>返回一个集合中的所有索引的数组。</p><p>语法：<br>db.collection.getIndexes()</p><p>提示：该语法命令运行要求是MongoDB 3.0+</p><h3 id="2-2-索引的创建"><a href="#2-2-索引的创建" class="headerlink" title="2.2 索引的创建"></a>2.2 索引的创建</h3><p>说明：<br>在集合上创建索引。</p><p>语法：<br>db.collection.createIndex(keys, options)</p><h3 id="2-3-索引的移除"><a href="#2-3-索引的移除" class="headerlink" title="2.3 索引的移除"></a>2.3 索引的移除</h3><p>说明：可以移除指定的索引，或移除所有索引</p><p>1、指定索引的移除<br>语法：<br>db.collection.dropIndex(index)  </p><p>2、所有索引的移除<br>语法：<br>db.collection.dropIndexes()</p><h2 id="三、索引的使用"><a href="#三、索引的使用" class="headerlink" title="三、索引的使用"></a>三、索引的使用</h2><h3 id="3-1-执行计划"><a href="#3-1-执行计划" class="headerlink" title="3.1 执行计划"></a>3.1 执行计划</h3><p>分析查询性能（Analyze Query Performance）通常使用执行计划（解释计划、Explain Plan）来查看查询的情况，如查询耗费的时间、是<br>否基于索引查询等。<br>那么，通常，我们想知道，建立的索引是否有效，效果如何，都需要通过执行计划查看。<br>语法：<br>db.collection.find(query,options).explain(options)</p><h3 id="3-2-涵盖的查询"><a href="#3-2-涵盖的查询" class="headerlink" title="3.2 涵盖的查询"></a>3.2 涵盖的查询</h3><p>当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。 这些覆盖的查询可以<br>非常有效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB事务</title>
      <link href="/MongoDB%E4%BA%8B%E5%8A%A1/"/>
      <url>/MongoDB%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>写事务：writeConcern<br>读事务：readPreference、readConcern<br>多文档事务</p><span id="more"></span><p>具体可参考图灵学院教程，目前找到的唯一有讲MongoDB事务的视频</p>]]></content>
      
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
